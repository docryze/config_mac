"========================================vim plugin========================================
call plug#begin('~/.vim/plugged')

"nerdtree
Plug 'preservim/nerdtree'
"auto-pairs
Plug 'jiangmiao/auto-pairs'
"surround
Plug 'tpope/vim-surround'
"easymotion
Plug 'easymotion/vim-easymotion'
"repeat
Plug 'tpope/vim-repeat'
"nerdcommenter
Plug 'preservim/nerdcommenter'
"fzf
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': 'nvm use default'}
"airline
Plug 'vim-airline/vim-airline'
"colorscheme
"Plug 'junegunn/seoul256.vim'
Plug 'morhetz/gruvbox'

call plug#end()

"nerdtree
let g:NERDTreeFileLines = 1
let NERDTreeShowHidden=1

"gruvbox
colo gruvbox
set background=dark


"airline
let g:airline#extensions#tabline#enabled = 1


"easymotion
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
let g:EasyMotion_smartcase = 1


" vim-repeat
"silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)


" fzf
" Initialize configuration dictionary
let g:fzf_vim = {}
let g:fzf_vim.preview_window = ['right,50%', 'ctrl-/']
let g:fzf_vim.buffers_jump = 1
let g:fzf_vim.commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_vim.tags_command = 'ctags -R'
let g:fzf_vim.commands_expect = 'alt-enter,ctrl-x'
let g:fzf_vim.buffers_options = '--style full --border-label " Open Buffers "'


"coc-vim
let g:coc_global_extensions = [
	\ 'coc-marketplace',
	\ 'coc-lists',
	\ 'coc-clangd',
	\ 'coc-cmake',
	\ 'coc-sh',
	\ 'coc-vimlsp',
	\ 'coc-json',
    \ 'coc-go',
    \]

set signcolumn=number


"========================================config========================================
set encoding=utf-8
set hidden
set nobackup
set nowritebackup

set nocompatible
syntax on
set showmode
set showcmd
set t_Co=256
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
"set rnu
set nu
set relativenumber
"set cursorline
"set textwidth=100
"set wrap
"set linebreak
"set wrapmargin=2
set scrolloff=5
set sidescrolloff=15
set laststatus=2
set ruler
set showmatch
set hlsearch
set incsearch
"set ignorecase
"set spell spelllang=en_us
set noswapfile
set noerrorbells
"set visualbell
set history=100
set nowrap
set backspace=2
filetype plugin on



"======================================== autocmd ========================================
"au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" nerdtree
" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if winnr() == winnr('h') && bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif


" coc-vim
autocmd CursorHold * silent call CocActionAsync('highlight')


"======================================== map ========================================
"nerdtree
nnoremap <C-S-n> :NERDTreeMirror<CR>:NERDTreeFocus<CR>
nnoremap <C-n> :NERDTreeMirror<CR>:NERDTreeToggle<CR>
"coc-vim
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
inoremap <silent><expr> <cr> coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm() : "\<C-g>u\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"


nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> K :call ShowDocumentation()<CR>


xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

"fzf
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
nmap ff :Files
nmap fb :Buffers

"easymotion
nmap  ew <Plug>(easymotion-bd-w)
nmap ew <Plug>(easymotion-overwin-w)
nmap es <Plug>(easymotion-s2)
nmap et <Plug>(easymotion-t2)
nmap ej <Plug>(easymotion-j)
nmap ek <Plug>(easymotion-k)
nmap el <Plug>(easymotion-lineforward)
nmap eh <Plug>(easymotion-linebackward)

"custom vim map
"vim - config
nnoremap <leader>r :source %<cr>
"explore
let g:netrw_winsize=30
let g:netrw_chgwin=-1
let g:netrw_browse_split = 4
let g:netrw_liststyle=3
"noremap <C-e> :Vexplore<cr>
"noremap <C-r> :Rexplore<cr>

"window size
nnoremap <c-k> :res +5<<cr>
nnoremap <c-j> :res -5<cr>
nnoremap <c-h> :vertical res +5<cr>
nnoremap <c-l> :vertical res -5<cr>


"vim - move
nnoremap <C-[> <esc>
"inoremap <C-h> <left>
"inoremap <C-l> <right>
"inoremap <C-k> <up>
"inoremap <C-j> <down>
inoremap <C-o> <esc>o
nmap bp :bp<cr>
nmap bn :bn<cr>
nmap bd :bd<cr>
"vim - select
nmap <C-a> ggVGG
"vim - terminal
nmap <C-p> :bo terminal<cr>
tnoremap <C-v> <C-w><S-n>
tnoremap <C-q> exit<cr>
"vim - cmake
tnoremap <C-C> cmake --preset default<cr>
tnoremap <C-b> cmake --build --preset default<cr>
tnoremap <C-r> cmake --build --preset default --target clean<cr>
